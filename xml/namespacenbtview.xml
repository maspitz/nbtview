<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="namespacenbtview" kind="namespace" language="C++">
    <compoundname>nbtview</compoundname>
    <innerclass refid="classnbtview_1_1BinaryDeserializer" prot="public">nbtview::BinaryDeserializer</innerclass>
    <innerclass refid="classnbtview_1_1UnexpectedEndOfInputException" prot="public">nbtview::UnexpectedEndOfInputException</innerclass>
    <innerclass refid="classnbtview_1_1BinaryReader" prot="public">nbtview::BinaryReader</innerclass>
    <innerclass refid="classnbtview_1_1BinaryWriter" prot="public">nbtview::BinaryWriter</innerclass>
    <innerclass refid="classnbtview_1_1Deserializer" prot="public">nbtview::Deserializer</innerclass>
    <innerclass refid="structnbtview_1_1Region" prot="public">nbtview::Region</innerclass>
    <innerclass refid="classnbtview_1_1Region__File" prot="public">nbtview::Region_File</innerclass>
    <innerclass refid="structnbtview_1_1None" prot="public">nbtview::None</innerclass>
    <innerclass refid="structnbtview_1_1TagID" prot="public">nbtview::TagID</innerclass>
    <innerclass refid="classnbtview_1_1Tag" prot="public">nbtview::Tag</innerclass>
    <innerclass refid="structnbtview_1_1array__format" prot="public">nbtview::array_format</innerclass>
    <innerclass refid="structnbtview_1_1Inflation__Status" prot="public">nbtview::Inflation_Status</innerclass>
    <innernamespace refid="namespacenbtview_1_1detail">nbtview::detail</innernamespace>
    <innernamespace refid="namespacenbtview_1_1zlib">nbtview::zlib</innernamespace>
      <sectiondef kind="user-defined">
      <header>Input interface</header>
      <description><para>Deserialize from binary encoded input </para>
</description>
      <memberdef kind="function" id="nbtview_8cpp_1aa4c7f0bb2225d506fd0ad00d381f537f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; std::string, <ref refid="classnbtview_1_1Tag" kindref="compound">Tag</ref> &gt;</type>
        <definition>std::pair&lt; std::string, Tag &gt; nbtview::read_binary</definition>
        <argsstring>(std::istream &amp;input)</argsstring>
        <name>read_binary</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
<para>Deserializes from a stream. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>An istream opened with ios::binary. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pair consisting of the decoded root tag&apos;s name and payload.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::runtime_error</parametername>
</parameternamelist>
<parameterdescription>
<para>if the input could not be decoded successfully. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/nbtview.cpp" line="39" column="11" bodyfile="nbtview/nbtview.cpp" bodystart="39" bodyend="49" declfile="nbtview/nbtview.hpp" declline="55" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="nbtview_8cpp_1a554d192d3d961c1972fdb7a1eb3e22ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; std::string, <ref refid="classnbtview_1_1Tag" kindref="compound">Tag</ref> &gt;</type>
        <definition>std::pair&lt; std::string, Tag &gt; nbtview::read_binary</definition>
        <argsstring>(const unsigned char *data, size_t data_length)</argsstring>
        <name>read_binary</name>
        <param>
          <type>const unsigned char *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>data_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/nbtview.cpp" line="51" column="11" bodyfile="nbtview/nbtview.cpp" bodystart="51" bodyend="63" declfile="nbtview/nbtview.hpp" declline="65" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="nbtview_8cpp_1a938ea9d0e3e51f465d050f8069887e20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; std::string, <ref refid="classnbtview_1_1Tag" kindref="compound">Tag</ref> &gt;</type>
        <definition>std::pair&lt; std::string, Tag &gt; nbtview::read_binary</definition>
        <argsstring>(std::vector&lt; unsigned char &gt; bytes)</argsstring>
        <name>read_binary</name>
        <param>
          <type>std::vector&lt; unsigned char &gt;</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
<para>Deserializes from a vector of bytes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of unsigned char. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pair consisting of the decoded root tag&apos;s name and payload.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::runtime_error</parametername>
</parameternamelist>
<parameterdescription>
<para>if the input could not be decoded successfully. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/nbtview.cpp" line="65" column="11" bodyfile="nbtview/nbtview.cpp" bodystart="65" bodyend="67" declfile="nbtview/nbtview.hpp" declline="63" declcolumn="11"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Output interface</header>
      <memberdef kind="function" id="nbtview_8cpp_1a552afcf07de4c0e568601c95b4bb2486" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nbtview::write_binary</definition>
        <argsstring>(const Tag &amp;tag, std::string_view name, std::ostream &amp;output)</argsstring>
        <name>write_binary</name>
        <param>
          <type>const <ref refid="classnbtview_1_1Tag" kindref="compound">Tag</ref> &amp;</type>
          <declname>tag</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>name</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>Serializes a tag to a stream. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>The tag to be serialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name specified for the tag. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>An ostream opened with ios::binary.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The binary encoding of the tag is in the NBT format. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/nbtview.cpp" line="69" column="6" bodyfile="nbtview/nbtview.cpp" bodystart="69" bodyend="73" declfile="nbtview/nbtview.hpp" declline="82" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="Tag_8hpp_1ae76f4d3336baad88fae92d675f39b36a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; nbtview::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Tag &amp;tag)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classnbtview_1_1Tag" kindref="compound">Tag</ref> &amp;</type>
          <declname>tag</declname>
        </param>
        <briefdescription>
<para>Outputs a string representation of a tag to a stream. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>The tag to be written as a string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name specified for the tag. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para>An ostream suitable for text output.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The string representation of the tag structure is in the SNBT format. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/Tag.hpp" line="338" column="8" bodyfile="nbtview/Tag.hpp" bodystart="338" bodyend="340"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="Tag_8hpp_1afc3b190dfb9b456a2b36e19029d229b1" prot="public" static="no" strong="yes">
        <type>char</type>
        <name>TypeCode</name>
        <enumvalue id="Tag_8hpp_1afc3b190dfb9b456a2b36e19029d229b1a87557f11575c0ad78e4e28abedc13b6e" prot="public">
          <name>End</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="Tag_8hpp_1afc3b190dfb9b456a2b36e19029d229b1aa245c3230debe5c956484ecc6fa93877" prot="public">
          <name>Byte</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="Tag_8hpp_1afc3b190dfb9b456a2b36e19029d229b1a30bb747c98bccdd11b3f89e644c4d0ad" prot="public">
          <name>Short</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="Tag_8hpp_1afc3b190dfb9b456a2b36e19029d229b1a1686a6c336b71b36d77354cea19a8b52" prot="public">
          <name>Int</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="Tag_8hpp_1afc3b190dfb9b456a2b36e19029d229b1a8394f0347c184cf156ac5924dccb773b" prot="public">
          <name>Long</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="Tag_8hpp_1afc3b190dfb9b456a2b36e19029d229b1a22ae0e2b89e5e3d477f988cc36d3272b" prot="public">
          <name>Float</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="Tag_8hpp_1afc3b190dfb9b456a2b36e19029d229b1ad909d38d705ce75386dd86e611a82f5b" prot="public">
          <name>Double</name>
          <initializer>= 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="Tag_8hpp_1afc3b190dfb9b456a2b36e19029d229b1a250e13bca3f244aa4a45b3322c1de3d8" prot="public">
          <name>Byte_Array</name>
          <initializer>= 7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="Tag_8hpp_1afc3b190dfb9b456a2b36e19029d229b1a27118326006d3829667a400ad23d5d98" prot="public">
          <name>String</name>
          <initializer>= 8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="Tag_8hpp_1afc3b190dfb9b456a2b36e19029d229b1a4ee29ca12c7d126654bd0e5275de6135" prot="public">
          <name>List</name>
          <initializer>= 9</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="Tag_8hpp_1afc3b190dfb9b456a2b36e19029d229b1a26154ea007c65f860de5333a555a56cf" prot="public">
          <name>Compound</name>
          <initializer>= 10</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="Tag_8hpp_1afc3b190dfb9b456a2b36e19029d229b1ab91d062a81ee9431cc0253ac157bd98b" prot="public">
          <name>Int_Array</name>
          <initializer>= 11</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="Tag_8hpp_1afc3b190dfb9b456a2b36e19029d229b1a9048cc28d3a136fb157529b21ac3055e" prot="public">
          <name>Long_Array</name>
          <initializer>= 12</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="Tag_8hpp_1afc3b190dfb9b456a2b36e19029d229b1a6adf97f83acf6453d4a6a4b1070f3754" prot="public">
          <name>None</name>
          <initializer>= 99</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>TypeCode is a one-byte encoding of the data type of an NBT tag. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/Tag.hpp" line="31" column="1" bodyfile="nbtview/Tag.hpp" bodystart="31" bodyend="46"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="Tag_8hpp_1abac20ead73188ab8094137b5b4bbd5f2" prot="public" static="no">
        <type>unsigned char</type>
        <definition>using nbtview::End = typedef unsigned char</definition>
        <argsstring></argsstring>
        <name>End</name>
        <briefdescription>
<para>NBT End tag: marks the end of a Compound <ref refid="classnbtview_1_1Tag" kindref="compound">Tag</ref>&apos;s payload. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/Tag.hpp" line="51" column="1" bodyfile="nbtview/Tag.hpp" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="Tag_8hpp_1af68b4d9024e97e56e47b022e65b25f15" prot="public" static="no">
        <type>int8_t</type>
        <definition>using nbtview::Byte = typedef int8_t</definition>
        <argsstring></argsstring>
        <name>Byte</name>
        <briefdescription>
<para>8-bit signed integer </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/Tag.hpp" line="53" column="1" bodyfile="nbtview/Tag.hpp" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="Tag_8hpp_1a135ffec411a1c14822713fd40959fdf6" prot="public" static="no">
        <type>int16_t</type>
        <definition>using nbtview::Short = typedef int16_t</definition>
        <argsstring></argsstring>
        <name>Short</name>
        <briefdescription>
<para>16-bit signed integer </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/Tag.hpp" line="55" column="1" bodyfile="nbtview/Tag.hpp" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="Tag_8hpp_1a6fedb4bc19422081c525566dfec4b89b" prot="public" static="no">
        <type>int32_t</type>
        <definition>using nbtview::Int = typedef int32_t</definition>
        <argsstring></argsstring>
        <name>Int</name>
        <briefdescription>
<para>32-bit signed integer </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/Tag.hpp" line="57" column="1" bodyfile="nbtview/Tag.hpp" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="Tag_8hpp_1ac0fddc63117df18c01dd94b78621bce0" prot="public" static="no">
        <type>int64_t</type>
        <definition>using nbtview::Long = typedef int64_t</definition>
        <argsstring></argsstring>
        <name>Long</name>
        <briefdescription>
<para>64-bit signed integer </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/Tag.hpp" line="59" column="1" bodyfile="nbtview/Tag.hpp" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="Tag_8hpp_1a40ef7b380a31d7abd2744a2f9d2725c3" prot="public" static="no">
        <type>float</type>
        <definition>using nbtview::Float = typedef float</definition>
        <argsstring></argsstring>
        <name>Float</name>
        <briefdescription>
<para>32-bit floating point data </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/Tag.hpp" line="61" column="1" bodyfile="nbtview/Tag.hpp" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="Tag_8hpp_1a06f91b24dbf822dbf7d54103059e1da0" prot="public" static="no">
        <type>double</type>
        <definition>using nbtview::Double = typedef double</definition>
        <argsstring></argsstring>
        <name>Double</name>
        <briefdescription>
<para>64-bit floating point data </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/Tag.hpp" line="63" column="1" bodyfile="nbtview/Tag.hpp" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="Tag_8hpp_1ac568dd2508ef25a79f4527b5b30c2175" prot="public" static="no">
        <type>std::vector&lt; <ref refid="Tag_8hpp_1af68b4d9024e97e56e47b022e65b25f15" kindref="member">Byte</ref> &gt;</type>
        <definition>using nbtview::Byte_Array = typedef std::vector&lt;Byte&gt;</definition>
        <argsstring></argsstring>
        <name>Byte_Array</name>
        <briefdescription>
<para>array of Byte </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/Tag.hpp" line="65" column="1" bodyfile="nbtview/Tag.hpp" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="Tag_8hpp_1a8763725f06fd8f86ba0393bf56d78761" prot="public" static="no">
        <type>std::string</type>
        <definition>using nbtview::String = typedef std::string</definition>
        <argsstring></argsstring>
        <name>String</name>
        <briefdescription>
<para>string of characters (supports UTF-8) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/Tag.hpp" line="67" column="1" bodyfile="nbtview/Tag.hpp" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="Tag_8hpp_1acd24fbf075c34a11c8c0b38c4a1b9adb" prot="public" static="no">
        <type>std::vector&lt; <ref refid="classnbtview_1_1Tag" kindref="compound">Tag</ref> &gt;</type>
        <definition>using nbtview::List = typedef std::vector&lt;Tag&gt;</definition>
        <argsstring></argsstring>
        <name>List</name>
        <briefdescription>
<para>array of <ref refid="classnbtview_1_1Tag" kindref="compound">Tag</ref> objects </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/Tag.hpp" line="69" column="1" bodyfile="nbtview/Tag.hpp" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="Tag_8hpp_1ac7fc87b9f955bdb806db77eca81aafde" prot="public" static="no">
        <type>std::map&lt; std::string, <ref refid="classnbtview_1_1Tag" kindref="compound">Tag</ref> &gt;</type>
        <definition>using nbtview::Compound = typedef std::map&lt;std::string, Tag&gt;</definition>
        <argsstring></argsstring>
        <name>Compound</name>
        <briefdescription>
<para>map from string to <ref refid="classnbtview_1_1Tag" kindref="compound">Tag</ref> objects </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/Tag.hpp" line="71" column="1" bodyfile="nbtview/Tag.hpp" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="Tag_8hpp_1aedc8581c15b590af57635d606a2c73a0" prot="public" static="no">
        <type>std::vector&lt; <ref refid="Tag_8hpp_1a6fedb4bc19422081c525566dfec4b89b" kindref="member">Int</ref> &gt;</type>
        <definition>using nbtview::Int_Array = typedef std::vector&lt;Int&gt;</definition>
        <argsstring></argsstring>
        <name>Int_Array</name>
        <briefdescription>
<para>array of Int </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/Tag.hpp" line="73" column="1" bodyfile="nbtview/Tag.hpp" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="Tag_8hpp_1af706de40c93703c773c7475bf3075a81" prot="public" static="no">
        <type>std::vector&lt; <ref refid="Tag_8hpp_1ac0fddc63117df18c01dd94b78621bce0" kindref="member">Long</ref> &gt;</type>
        <definition>using nbtview::Long_Array = typedef std::vector&lt;Long&gt;</definition>
        <argsstring></argsstring>
        <name>Long_Array</name>
        <briefdescription>
<para>array of Long </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/Tag.hpp" line="75" column="1" bodyfile="nbtview/Tag.hpp" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="Tag_8hpp_1a7079e76929422395d595651f1666a6c8" prot="public" static="no">
        <type>std::variant&lt; <ref refid="structnbtview_1_1None" kindref="compound">None</ref>, <ref refid="Tag_8hpp_1abac20ead73188ab8094137b5b4bbd5f2" kindref="member">End</ref>, <ref refid="Tag_8hpp_1af68b4d9024e97e56e47b022e65b25f15" kindref="member">Byte</ref>, <ref refid="Tag_8hpp_1a135ffec411a1c14822713fd40959fdf6" kindref="member">Short</ref>, <ref refid="Tag_8hpp_1a6fedb4bc19422081c525566dfec4b89b" kindref="member">Int</ref>, <ref refid="Tag_8hpp_1ac0fddc63117df18c01dd94b78621bce0" kindref="member">Long</ref>, <ref refid="Tag_8hpp_1a40ef7b380a31d7abd2744a2f9d2725c3" kindref="member">Float</ref>, <ref refid="Tag_8hpp_1a06f91b24dbf822dbf7d54103059e1da0" kindref="member">Double</ref>, <ref refid="Tag_8hpp_1ac568dd2508ef25a79f4527b5b30c2175" kindref="member">Byte_Array</ref>, <ref refid="Tag_8hpp_1a8763725f06fd8f86ba0393bf56d78761" kindref="member">String</ref>, <ref refid="Tag_8hpp_1acd24fbf075c34a11c8c0b38c4a1b9adb" kindref="member">List</ref>, <ref refid="Tag_8hpp_1ac7fc87b9f955bdb806db77eca81aafde" kindref="member">Compound</ref>, <ref refid="Tag_8hpp_1aedc8581c15b590af57635d606a2c73a0" kindref="member">Int_Array</ref>, <ref refid="Tag_8hpp_1af706de40c93703c773c7475bf3075a81" kindref="member">Long_Array</ref> &gt;</type>
        <definition>using nbtview::TagValue = typedef std::variant&lt;None, End, Byte, Short, Int, Long, Float, Double, Byte_Array, String, List, Compound, Int_Array, Long_Array&gt;</definition>
        <argsstring></argsstring>
        <name>TagValue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/Tag.hpp" line="77" column="1" bodyfile="nbtview/Tag.hpp" bodystart="79" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="nbtview_8cpp_1a62378fce3f65363cf1ac2855647f43cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; unsigned char &gt;::const_iterator</type>
        <definition>std::vector&lt; unsigned char &gt;::const_iterator nbtview::fast_find_named_tag</definition>
        <argsstring>(std::vector&lt; unsigned char &gt;::const_iterator nbt_start, std::vector&lt; unsigned char &gt;::const_iterator nbt_stop, TypeCode tag_type, const std::string &amp;tag_name)</argsstring>
        <name>fast_find_named_tag</name>
        <param>
          <type>std::vector&lt; unsigned char &gt;::const_iterator</type>
          <declname>nbt_start</declname>
        </param>
        <param>
          <type>std::vector&lt; unsigned char &gt;::const_iterator</type>
          <declname>nbt_stop</declname>
        </param>
        <param>
          <type><ref refid="Tag_8hpp_1afc3b190dfb9b456a2b36e19029d229b1" kindref="member">TypeCode</ref></type>
          <declname>tag_type</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>tag_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/nbtview.cpp" line="17" column="1" bodyfile="nbtview/nbtview.cpp" bodystart="17" bodyend="37" declfile="nbtview/nbtview.hpp" declline="40" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="Region_8cpp_1a1ce60d52b2a334e72db23f22822b8705" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t nbtview::chunk_data_length</definition>
        <argsstring>(const std::vector&lt; unsigned char &gt; &amp;chunk_header)</argsstring>
        <name>chunk_data_length</name>
        <param>
          <type>const std::vector&lt; unsigned char &gt; &amp;</type>
          <declname>chunk_header</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/Region.cpp" line="69" column="10" bodyfile="nbtview/Region.cpp" bodystart="69" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="Tag_8hpp_1afd64d6ab3e2819cfedfb6ab516ff1fb8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="Tag_8hpp_1afc3b190dfb9b456a2b36e19029d229b1" kindref="member">TypeCode</ref></type>
        <definition>const TypeCode nbtview::list_type</definition>
        <argsstring>(const List &amp;lst)</argsstring>
        <name>list_type</name>
        <param>
          <type>const <ref refid="Tag_8hpp_1acd24fbf075c34a11c8c0b38c4a1b9adb" kindref="member">List</ref> &amp;</type>
          <declname>lst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/Tag.hpp" line="180" column="23" bodyfile="nbtview/Tag.hpp" bodystart="180" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="Tag_8hpp_1a19413d7bf905e9348269c64d23877c2b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string nbtview::to_string</definition>
        <argsstring>(const Tag &amp;tag)</argsstring>
        <name>to_string</name>
        <param>
          <type>const <ref refid="classnbtview_1_1Tag" kindref="compound">Tag</ref> &amp;</type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/Tag.hpp" line="284" column="20" bodyfile="nbtview/Tag.hpp" bodystart="284" bodyend="325" declfile="nbtview/Tag.hpp" declline="184" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="Tag_8hpp_1af36f2787f855262d3b6db2180a6a8e69" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* nbtview::typecode_to_string</definition>
        <argsstring>(TypeCode type)</argsstring>
        <name>typecode_to_string</name>
        <param>
          <type><ref refid="Tag_8hpp_1afc3b190dfb9b456a2b36e19029d229b1" kindref="member">TypeCode</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/Tag.hpp" line="186" column="19" bodyfile="nbtview/Tag.hpp" bodystart="186" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="Tag_8hpp_1aadd1428b5a597277ba6f19a5f142025c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string nbtview::tag_id_string</definition>
        <argsstring>(const Tag &amp;tag)</argsstring>
        <name>tag_id_string</name>
        <param>
          <type>const <ref refid="classnbtview_1_1Tag" kindref="compound">Tag</ref> &amp;</type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/Tag.hpp" line="221" column="20" bodyfile="nbtview/Tag.hpp" bodystart="221" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="Tag_8hpp_1a3b3df6934db5cf34b130c7b00832a41a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string nbtview::associative_to_string</definition>
        <argsstring>(const T &amp;iterable)</argsstring>
        <name>associative_to_string</name>
        <param>
          <type>const T &amp;</type>
          <declname>iterable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/Tag.hpp" line="232" column="25" bodyfile="nbtview/Tag.hpp" bodystart="232" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="Tag_8hpp_1aebcc6d183158b9c1f9a3bee2aa4370d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string nbtview::sequential_to_string</definition>
        <argsstring>(const T &amp;iterable, const std::string &amp;array_prefix)</argsstring>
        <name>sequential_to_string</name>
        <param>
          <type>const T &amp;</type>
          <declname>iterable</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>array_prefix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/Tag.hpp" line="253" column="13" bodyfile="nbtview/Tag.hpp" bodystart="253" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="Tag_8hpp_1a7dcb721dffa0bf9291ebde4d8ed52762" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string nbtview::array_to_string</definition>
        <argsstring>(const T &amp;iterable, const std::string &amp;array_prefix, const std::string &amp;element_suffix)</argsstring>
        <name>array_to_string</name>
        <param>
          <type>const T &amp;</type>
          <declname>iterable</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>array_prefix</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>element_suffix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/Tag.hpp" line="269" column="13" bodyfile="nbtview/Tag.hpp" bodystart="269" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="utils_8hpp_1a2e368e409169b9c433f16763be3f0b37" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nbtview::snbt_requires_quoting</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>snbt_requires_quoting</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/utils.hpp" line="20" column="13" bodyfile="nbtview/utils.hpp" bodystart="20" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="utils_8hpp_1a99f417945a3700f4c8a19d670f19c3a7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string nbtview::quoted_string</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>quoted_string</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/utils.hpp" line="25" column="20" bodyfile="nbtview/utils.hpp" bodystart="25" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="utils_8hpp_1a0ee9f2ba9bf67f7636003442cfd4d967" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string nbtview::comma_delimited_array</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;vec, const array_format &amp;fmt)</argsstring>
        <name>comma_delimited_array</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>const <ref refid="structnbtview_1_1array__format" kindref="compound">array_format</ref> &amp;</type>
          <declname>fmt</declname>
        </param>
        <briefdescription>
<para>Generates a comma-delimited string representation of an array. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Type</parametername>
</parameternamelist>
<parameterdescription>
<para>of elements in the vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>The input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>The formatting configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The output string representating the vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/utils.hpp" line="52" column="13" bodyfile="nbtview/utils.hpp" bodystart="52" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="zlib__utils_8cpp_1af44731ec89ee78b8a15db9ac0ed12b64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool nbtview::has_compression_header</definition>
        <argsstring>(const unsigned char *data, size_t data_length)</argsstring>
        <name>has_compression_header</name>
        <param>
          <type>const unsigned char *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>data_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/zlib_utils.cpp" line="14" column="6" bodyfile="nbtview/zlib_utils.cpp" bodystart="14" bodyend="32" declfile="nbtview/zlib_utils.hpp" declline="19" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="zlib__utils_8cpp_1a17340db79f2b87e145da9e4a2da3dc8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; unsigned char &gt;</type>
        <definition>std::vector&lt; unsigned char &gt; nbtview::decompress_data</definition>
        <argsstring>(const unsigned char *compressed_data, size_t data_length)</argsstring>
        <name>decompress_data</name>
        <param>
          <type>const unsigned char *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>data_length</declname>
        </param>
        <briefdescription>
<para>Decompress data into a vector of bytes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/zlib_utils.cpp" line="115" column="13" bodyfile="nbtview/zlib_utils.cpp" bodystart="115" bodyend="125" declfile="nbtview/zlib_utils.hpp" declline="22" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="zlib__utils_8cpp_1ae636739af4d439c8742a4b1fcefa07a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; std::vector&lt; unsigned char &gt;, <ref refid="structnbtview_1_1Inflation__Status" kindref="compound">Inflation_Status</ref> &gt;</type>
        <definition>std::pair&lt; std::vector&lt; unsigned char &gt;, Inflation_Status &gt; nbtview::inflate_sectors</definition>
        <argsstring>(const unsigned char *input_data, size_t input_length)</argsstring>
        <name>inflate_sectors</name>
        <param>
          <type>const unsigned char *</type>
          <declname>input_data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>input_length</declname>
        </param>
        <briefdescription>
<para>Decompress compressed data into a vector of bytes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/zlib_utils.cpp" line="128" column="1" bodyfile="nbtview/zlib_utils.cpp" bodystart="128" bodyend="141" declfile="nbtview/zlib_utils.hpp" declline="33" declcolumn="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="nbtview/BinaryDeserializer.cpp" line="12" column="1"/>
  </compounddef>
</doxygen>
