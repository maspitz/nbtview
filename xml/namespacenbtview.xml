<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="namespacenbtview" kind="namespace" language="C++">
    <compoundname>nbtview</compoundname>
    <innerclass refid="classnbtview_1_1BinaryDeserializer" prot="public">nbtview::BinaryDeserializer</innerclass>
    <innerclass refid="classnbtview_1_1UnexpectedEndOfInputException" prot="public">nbtview::UnexpectedEndOfInputException</innerclass>
    <innerclass refid="classnbtview_1_1BinaryReader" prot="public">nbtview::BinaryReader</innerclass>
    <innerclass refid="classnbtview_1_1BinaryWriter" prot="public">nbtview::BinaryWriter</innerclass>
    <innerclass refid="classnbtview_1_1Deserializer" prot="public">nbtview::Deserializer</innerclass>
    <innerclass refid="structnbtview_1_1Region" prot="public">nbtview::Region</innerclass>
    <innerclass refid="classnbtview_1_1Region__File" prot="public">nbtview::Region_File</innerclass>
    <innerclass refid="structnbtview_1_1StringifyTag" prot="public">nbtview::StringifyTag</innerclass>
    <innerclass refid="structnbtview_1_1StringifyTagType" prot="public">nbtview::StringifyTagType</innerclass>
    <innerclass refid="structnbtview_1_1TagID" prot="public">nbtview::TagID</innerclass>
    <innerclass refid="classnbtview_1_1Compound" prot="public">nbtview::Compound</innerclass>
    <innerclass refid="classnbtview_1_1List" prot="public">nbtview::List</innerclass>
    <innerclass refid="structnbtview_1_1array__format" prot="public">nbtview::array_format</innerclass>
    <innernamespace refid="namespacenbtview_1_1detail">nbtview::detail</innernamespace>
    <innernamespace refid="namespacenbtview_1_1zlib">nbtview::zlib</innernamespace>
      <sectiondef kind="user-defined">
      <header>Input interface</header>
      <description><para>Deserialize from binary encoded input </para>
</description>
      <memberdef kind="function" id="namespacenbtview_1aa4c7f0bb2225d506fd0ad00d381f537f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; std::string, <ref refid="namespacenbtview_1a9fcb48c3df7749255fcc9f3f9e84f3fa" kindref="member">Tag</ref> &gt;</type>
        <definition>std::pair&lt; std::string, Tag &gt; nbtview::read_binary</definition>
        <argsstring>(std::istream &amp;input)</argsstring>
        <name>read_binary</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
<para>Deserializes from a stream. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>An istream opened with ios::binary. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pair consisting of the decoded root tag&apos;s name and payload.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::runtime_error</parametername>
</parameternamelist>
<parameterdescription>
<para>if the input could not be decoded successfully. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/nbtview.cpp" line="40" column="11" bodyfile="nbtview/nbtview.cpp" bodystart="40" bodyend="50" declfile="nbtview/nbtview.hpp" declline="55" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacenbtview_1a938ea9d0e3e51f465d050f8069887e20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; std::string, <ref refid="namespacenbtview_1a9fcb48c3df7749255fcc9f3f9e84f3fa" kindref="member">Tag</ref> &gt;</type>
        <definition>std::pair&lt; std::string, Tag &gt; nbtview::read_binary</definition>
        <argsstring>(std::vector&lt; unsigned char &gt; bytes)</argsstring>
        <name>read_binary</name>
        <param>
          <type>std::vector&lt; unsigned char &gt;</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
<para>Deserializes from a vector of bytes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of unsigned char. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pair consisting of the decoded root tag&apos;s name and payload.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::runtime_error</parametername>
</parameternamelist>
<parameterdescription>
<para>if the input could not be decoded successfully. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/nbtview.cpp" line="52" column="11" bodyfile="nbtview/nbtview.cpp" bodystart="52" bodyend="60" declfile="nbtview/nbtview.hpp" declline="63" declcolumn="11"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Output interface</header>
      <memberdef kind="function" id="namespacenbtview_1a552afcf07de4c0e568601c95b4bb2486" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nbtview::write_binary</definition>
        <argsstring>(const Tag &amp;tag, std::string_view name, std::ostream &amp;output)</argsstring>
        <name>write_binary</name>
        <param>
          <type>const <ref refid="namespacenbtview_1a9fcb48c3df7749255fcc9f3f9e84f3fa" kindref="member">Tag</ref> &amp;</type>
          <declname>tag</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>name</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>Serializes a tag to a stream. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>The tag to be serialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name specified for the tag. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>An ostream opened with ios::binary.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The binary encoding of the tag is in the NBT format.</para>
</simplesect>
<simplesect kind="note"><para>Overloads of the <ref refid="namespacenbtview_1a552afcf07de4c0e568601c95b4bb2486" kindref="member">write_binary()</ref> function for <ref refid="classnbtview_1_1Compound" kindref="compound">Compound</ref> and <ref refid="classnbtview_1_1List" kindref="compound">List</ref> parameters are provided because <ref refid="classnbtview_1_1Compound" kindref="compound">Compound</ref> and <ref refid="classnbtview_1_1List" kindref="compound">List</ref> are move-only classes, which can prevent their implicit conversion to const Tag. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/nbtview.cpp" line="62" column="6" bodyfile="nbtview/nbtview.cpp" bodystart="62" bodyend="66" declfile="nbtview/nbtview.hpp" declline="83" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacenbtview_1afbb5f08ddadfd438a8d82539ea8ec7e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nbtview::write_binary</definition>
        <argsstring>(const Compound &amp;tag, std::string_view name, std::ostream &amp;output)</argsstring>
        <name>write_binary</name>
        <param>
          <type>const <ref refid="classnbtview_1_1Compound" kindref="compound">Compound</ref> &amp;</type>
          <declname>tag</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>name</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/nbtview.cpp" line="67" column="6" bodyfile="nbtview/nbtview.cpp" bodystart="67" bodyend="72" declfile="nbtview/nbtview.hpp" declline="84" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacenbtview_1aadf85cee84299935966d79e35574dd55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nbtview::write_binary</definition>
        <argsstring>(const List &amp;tag, std::string_view name, std::ostream &amp;output)</argsstring>
        <name>write_binary</name>
        <param>
          <type>const <ref refid="classnbtview_1_1List" kindref="compound">List</ref> &amp;</type>
          <declname>tag</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>name</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/nbtview.cpp" line="73" column="6" bodyfile="nbtview/nbtview.cpp" bodystart="73" bodyend="78" declfile="nbtview/nbtview.hpp" declline="86" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacenbtview_1a390fb78fe858b5c66d2f401f418bb769" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; nbtview::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Tag &amp;tag)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenbtview_1a9fcb48c3df7749255fcc9f3f9e84f3fa" kindref="member">Tag</ref> &amp;</type>
          <declname>tag</declname>
        </param>
        <briefdescription>
<para>Outputs a string representation of a tag to a stream. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>The tag to be written as a string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name specified for the tag. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>An ostream opened with ios::binary.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The string representation of the tag structure is in the SNBT format.</para>
</simplesect>
<simplesect kind="note"><para>Overloads of the stream insertion operator for <ref refid="classnbtview_1_1Compound" kindref="compound">Compound</ref> and <ref refid="classnbtview_1_1List" kindref="compound">List</ref> parameters are provided because <ref refid="classnbtview_1_1Compound" kindref="compound">Compound</ref> and <ref refid="classnbtview_1_1List" kindref="compound">List</ref> are move-only classes, which can prevent their implicit conversion to const Tag. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/nbtview.cpp" line="80" column="1" bodyfile="nbtview/nbtview.cpp" bodystart="80" bodyend="83" declfile="nbtview/nbtview.hpp" declline="100" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacenbtview_1a66cfd2044b9c70f09690fac3901c0ce2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; nbtview::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Compound &amp;tag)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classnbtview_1_1Compound" kindref="compound">Compound</ref> &amp;</type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/nbtview.cpp" line="85" column="1" bodyfile="nbtview/nbtview.cpp" bodystart="85" bodyend="88" declfile="nbtview/nbtview.hpp" declline="101" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacenbtview_1a3e30272ad6ec26c1630345d36477c40f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; nbtview::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const List &amp;tag)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classnbtview_1_1List" kindref="compound">List</ref> &amp;</type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/nbtview.cpp" line="90" column="1" bodyfile="nbtview/nbtview.cpp" bodystart="90" bodyend="93" declfile="nbtview/nbtview.hpp" declline="102" declcolumn="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacenbtview_1afc3b190dfb9b456a2b36e19029d229b1" prot="public" static="no" strong="yes">
        <type>char</type>
        <name>TypeCode</name>
        <enumvalue id="namespacenbtview_1afc3b190dfb9b456a2b36e19029d229b1a87557f11575c0ad78e4e28abedc13b6e" prot="public">
          <name>End</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacenbtview_1afc3b190dfb9b456a2b36e19029d229b1aa245c3230debe5c956484ecc6fa93877" prot="public">
          <name>Byte</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacenbtview_1afc3b190dfb9b456a2b36e19029d229b1a30bb747c98bccdd11b3f89e644c4d0ad" prot="public">
          <name>Short</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacenbtview_1afc3b190dfb9b456a2b36e19029d229b1a1686a6c336b71b36d77354cea19a8b52" prot="public">
          <name>Int</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacenbtview_1afc3b190dfb9b456a2b36e19029d229b1a8394f0347c184cf156ac5924dccb773b" prot="public">
          <name>Long</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacenbtview_1afc3b190dfb9b456a2b36e19029d229b1a22ae0e2b89e5e3d477f988cc36d3272b" prot="public">
          <name>Float</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacenbtview_1afc3b190dfb9b456a2b36e19029d229b1ad909d38d705ce75386dd86e611a82f5b" prot="public">
          <name>Double</name>
          <initializer>= 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacenbtview_1afc3b190dfb9b456a2b36e19029d229b1a250e13bca3f244aa4a45b3322c1de3d8" prot="public">
          <name>Byte_Array</name>
          <initializer>= 7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacenbtview_1afc3b190dfb9b456a2b36e19029d229b1a27118326006d3829667a400ad23d5d98" prot="public">
          <name>String</name>
          <initializer>= 8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacenbtview_1afc3b190dfb9b456a2b36e19029d229b1a4ee29ca12c7d126654bd0e5275de6135" prot="public">
          <name>List</name>
          <initializer>= 9</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacenbtview_1afc3b190dfb9b456a2b36e19029d229b1a26154ea007c65f860de5333a555a56cf" prot="public">
          <name>Compound</name>
          <initializer>= 10</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacenbtview_1afc3b190dfb9b456a2b36e19029d229b1ab91d062a81ee9431cc0253ac157bd98b" prot="public">
          <name>Int_Array</name>
          <initializer>= 11</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacenbtview_1afc3b190dfb9b456a2b36e19029d229b1a9048cc28d3a136fb157529b21ac3055e" prot="public">
          <name>Long_Array</name>
          <initializer>= 12</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>TypeCode is a one-byte encoding of the data type of an NBT tag. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/Tag.hpp" line="65" column="1" bodyfile="nbtview/Tag.hpp" bodystart="65" bodyend="79"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacenbtview_1abac20ead73188ab8094137b5b4bbd5f2" prot="public" static="no">
        <type>unsigned char</type>
        <definition>using nbtview::End = typedef unsigned char</definition>
        <argsstring></argsstring>
        <name>End</name>
        <briefdescription>
<para>NBT End tag: marks the end of a <ref refid="classnbtview_1_1Compound" kindref="compound">Compound</ref> Tag&apos;s payload. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/Tag.hpp" line="25" column="1" bodyfile="nbtview/Tag.hpp" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenbtview_1af68b4d9024e97e56e47b022e65b25f15" prot="public" static="no">
        <type>int8_t</type>
        <definition>using nbtview::Byte = typedef int8_t</definition>
        <argsstring></argsstring>
        <name>Byte</name>
        <briefdescription>
<para>8-bit signed integer </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/Tag.hpp" line="27" column="1" bodyfile="nbtview/Tag.hpp" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenbtview_1a135ffec411a1c14822713fd40959fdf6" prot="public" static="no">
        <type>int16_t</type>
        <definition>using nbtview::Short = typedef int16_t</definition>
        <argsstring></argsstring>
        <name>Short</name>
        <briefdescription>
<para>16-bit signed integer </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/Tag.hpp" line="29" column="1" bodyfile="nbtview/Tag.hpp" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenbtview_1a6fedb4bc19422081c525566dfec4b89b" prot="public" static="no">
        <type>int32_t</type>
        <definition>using nbtview::Int = typedef int32_t</definition>
        <argsstring></argsstring>
        <name>Int</name>
        <briefdescription>
<para>32-bit signed integer </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/Tag.hpp" line="31" column="1" bodyfile="nbtview/Tag.hpp" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenbtview_1ac0fddc63117df18c01dd94b78621bce0" prot="public" static="no">
        <type>int64_t</type>
        <definition>using nbtview::Long = typedef int64_t</definition>
        <argsstring></argsstring>
        <name>Long</name>
        <briefdescription>
<para>64-bit signed integer </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/Tag.hpp" line="33" column="1" bodyfile="nbtview/Tag.hpp" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenbtview_1a40ef7b380a31d7abd2744a2f9d2725c3" prot="public" static="no">
        <type>float</type>
        <definition>using nbtview::Float = typedef float</definition>
        <argsstring></argsstring>
        <name>Float</name>
        <briefdescription>
<para>32-bit floating point data </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/Tag.hpp" line="35" column="1" bodyfile="nbtview/Tag.hpp" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenbtview_1a06f91b24dbf822dbf7d54103059e1da0" prot="public" static="no">
        <type>double</type>
        <definition>using nbtview::Double = typedef double</definition>
        <argsstring></argsstring>
        <name>Double</name>
        <briefdescription>
<para>64-bit floating point data </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/Tag.hpp" line="37" column="1" bodyfile="nbtview/Tag.hpp" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenbtview_1ac568dd2508ef25a79f4527b5b30c2175" prot="public" static="no">
        <type>std::vector&lt; <ref refid="namespacenbtview_1af68b4d9024e97e56e47b022e65b25f15" kindref="member">Byte</ref> &gt;</type>
        <definition>using nbtview::Byte_Array = typedef std::vector&lt;Byte&gt;</definition>
        <argsstring></argsstring>
        <name>Byte_Array</name>
        <briefdescription>
<para>array of Byte </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/Tag.hpp" line="39" column="1" bodyfile="nbtview/Tag.hpp" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenbtview_1a8763725f06fd8f86ba0393bf56d78761" prot="public" static="no">
        <type>std::string</type>
        <definition>using nbtview::String = typedef std::string</definition>
        <argsstring></argsstring>
        <name>String</name>
        <briefdescription>
<para>string of characters (supports UTF-8) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/Tag.hpp" line="41" column="1" bodyfile="nbtview/Tag.hpp" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenbtview_1aedc8581c15b590af57635d606a2c73a0" prot="public" static="no">
        <type>std::vector&lt; <ref refid="namespacenbtview_1a6fedb4bc19422081c525566dfec4b89b" kindref="member">Int</ref> &gt;</type>
        <definition>using nbtview::Int_Array = typedef std::vector&lt;Int&gt;</definition>
        <argsstring></argsstring>
        <name>Int_Array</name>
        <briefdescription>
<para>array of Int </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/Tag.hpp" line="43" column="1" bodyfile="nbtview/Tag.hpp" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenbtview_1af706de40c93703c773c7475bf3075a81" prot="public" static="no">
        <type>std::vector&lt; <ref refid="namespacenbtview_1ac0fddc63117df18c01dd94b78621bce0" kindref="member">Long</ref> &gt;</type>
        <definition>using nbtview::Long_Array = typedef std::vector&lt;Long&gt;</definition>
        <argsstring></argsstring>
        <name>Long_Array</name>
        <briefdescription>
<para>array of Long </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/Tag.hpp" line="45" column="1" bodyfile="nbtview/Tag.hpp" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacenbtview_1a9fcb48c3df7749255fcc9f3f9e84f3fa" prot="public" static="no">
        <type>std::variant&lt; <ref refid="namespacenbtview_1abac20ead73188ab8094137b5b4bbd5f2" kindref="member">End</ref>, <ref refid="namespacenbtview_1af68b4d9024e97e56e47b022e65b25f15" kindref="member">Byte</ref>, <ref refid="namespacenbtview_1a135ffec411a1c14822713fd40959fdf6" kindref="member">Short</ref>, <ref refid="namespacenbtview_1a6fedb4bc19422081c525566dfec4b89b" kindref="member">Int</ref>, <ref refid="namespacenbtview_1ac0fddc63117df18c01dd94b78621bce0" kindref="member">Long</ref>, <ref refid="namespacenbtview_1a40ef7b380a31d7abd2744a2f9d2725c3" kindref="member">Float</ref>, <ref refid="namespacenbtview_1a06f91b24dbf822dbf7d54103059e1da0" kindref="member">Double</ref>, <ref refid="namespacenbtview_1ac568dd2508ef25a79f4527b5b30c2175" kindref="member">Byte_Array</ref>, <ref refid="namespacenbtview_1a8763725f06fd8f86ba0393bf56d78761" kindref="member">String</ref>, <ref refid="classnbtview_1_1List" kindref="compound">List</ref>, <ref refid="classnbtview_1_1Compound" kindref="compound">Compound</ref>, <ref refid="namespacenbtview_1aedc8581c15b590af57635d606a2c73a0" kindref="member">Int_Array</ref>, <ref refid="namespacenbtview_1af706de40c93703c773c7475bf3075a81" kindref="member">Long_Array</ref> &gt;</type>
        <definition>using nbtview::Tag = typedef std::variant&lt;End, Byte, Short, Int, Long, Float, Double, Byte_Array, String, List, Compound, Int_Array, Long_Array&gt;</definition>
        <argsstring></argsstring>
        <name>Tag</name>
        <briefdescription>
<para>Tag holds the value of an NBT tag. </para>
        </briefdescription>
        <detaileddescription>
<para>If the NBT tag has a name, it is stored in the <ref refid="classnbtview_1_1Compound" kindref="compound">Compound</ref> tag that contains it. The root tag&apos;s name (if it has one) is not stored.</para>
<para>You can use the functions provided by <ulink url="https://en.cppreference.com/w/cpp/header/variant">&lt;variant&gt;</ulink> to access a Tag&apos;s type and value. However, because you usually know what type you expect a given tag to be, it is generally more convenient to get an NBT value of that type via the <ref refid="classnbtview_1_1Compound_1aa3e34fe1fd2f862e82e135c8c3a8a1fe" kindref="member">Compound::get&lt;T&gt;</ref> method. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/Tag.hpp" line="61" column="1" bodyfile="nbtview/Tag.hpp" bodystart="62" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacenbtview_1a62378fce3f65363cf1ac2855647f43cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; unsigned char &gt;::const_iterator</type>
        <definition>std::vector&lt; unsigned char &gt;::const_iterator nbtview::fast_find_named_tag</definition>
        <argsstring>(std::vector&lt; unsigned char &gt;::const_iterator nbt_start, std::vector&lt; unsigned char &gt;::const_iterator nbt_stop, TypeCode tag_type, const std::string &amp;tag_name)</argsstring>
        <name>fast_find_named_tag</name>
        <param>
          <type>std::vector&lt; unsigned char &gt;::const_iterator</type>
          <declname>nbt_start</declname>
        </param>
        <param>
          <type>std::vector&lt; unsigned char &gt;::const_iterator</type>
          <declname>nbt_stop</declname>
        </param>
        <param>
          <type><ref refid="namespacenbtview_1afc3b190dfb9b456a2b36e19029d229b1" kindref="member">TypeCode</ref></type>
          <declname>tag_type</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>tag_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/nbtview.cpp" line="18" column="1" bodyfile="nbtview/nbtview.cpp" bodystart="18" bodyend="38" declfile="nbtview/nbtview.hpp" declline="40" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacenbtview_1a43354d58572bb75ca20767f91194f8c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t nbtview::chunk_data_length</definition>
        <argsstring>(std::span&lt; unsigned char &gt; chunk_header)</argsstring>
        <name>chunk_data_length</name>
        <param>
          <type>std::span&lt; unsigned char &gt;</type>
          <declname>chunk_header</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/Region.cpp" line="57" column="10" bodyfile="nbtview/Region.cpp" bodystart="57" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="namespacenbtview_1a792cf692f58bf3da1818184ad5f2dfd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string nbtview::tag_to_string</definition>
        <argsstring>(const Tag &amp;tag)</argsstring>
        <name>tag_to_string</name>
        <param>
          <type>const <ref refid="namespacenbtview_1a9fcb48c3df7749255fcc9f3f9e84f3fa" kindref="member">Tag</ref> &amp;</type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/Stringifier.cpp" line="73" column="13" bodyfile="nbtview/Stringifier.cpp" bodystart="73" bodyend="75" declfile="nbtview/Stringifier.hpp" declline="24" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacenbtview_1a5856db957caf969d2b2ff9b1b50d8f67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string nbtview::tag_to_string</definition>
        <argsstring>(const List &amp;tag)</argsstring>
        <name>tag_to_string</name>
        <param>
          <type>const <ref refid="classnbtview_1_1List" kindref="compound">List</ref> &amp;</type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/Stringifier.cpp" line="83" column="13" bodyfile="nbtview/Stringifier.cpp" bodystart="83" bodyend="83" declfile="nbtview/Stringifier.hpp" declline="25" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacenbtview_1a581ba1225cbd921ed202039c9a8faddd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string nbtview::tag_to_string</definition>
        <argsstring>(const Compound &amp;tag)</argsstring>
        <name>tag_to_string</name>
        <param>
          <type>const <ref refid="classnbtview_1_1Compound" kindref="compound">Compound</ref> &amp;</type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/Stringifier.cpp" line="84" column="13" bodyfile="nbtview/Stringifier.cpp" bodystart="84" bodyend="84" declfile="nbtview/Stringifier.hpp" declline="26" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacenbtview_1a407053dbe431b26db62ae49c816d70c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string nbtview::tag_type_to_string</definition>
        <argsstring>(const Tag &amp;tag)</argsstring>
        <name>tag_type_to_string</name>
        <param>
          <type>const <ref refid="namespacenbtview_1a9fcb48c3df7749255fcc9f3f9e84f3fa" kindref="member">Tag</ref> &amp;</type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/Stringifier.cpp" line="104" column="13" bodyfile="nbtview/Stringifier.cpp" bodystart="104" bodyend="106" declfile="nbtview/Stringifier.hpp" declline="28" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacenbtview_1a0bd7f6345e97652211a472943d4ffd9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string nbtview::tag_type_to_string</definition>
        <argsstring>(const List &amp;tag)</argsstring>
        <name>tag_type_to_string</name>
        <param>
          <type>const <ref refid="classnbtview_1_1List" kindref="compound">List</ref> &amp;</type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/Stringifier.cpp" line="108" column="13" bodyfile="nbtview/Stringifier.cpp" bodystart="108" bodyend="110" declfile="nbtview/Stringifier.hpp" declline="29" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacenbtview_1a02eba78aa9223937ff2ec6237d422c6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string nbtview::tag_type_to_string</definition>
        <argsstring>(const Compound &amp;tag)</argsstring>
        <name>tag_type_to_string</name>
        <param>
          <type>const <ref refid="classnbtview_1_1Compound" kindref="compound">Compound</ref> &amp;</type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/Stringifier.cpp" line="111" column="13" bodyfile="nbtview/Stringifier.cpp" bodystart="111" bodyend="113" declfile="nbtview/Stringifier.hpp" declline="30" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacenbtview_1a10e959b60f48cfa9e2bdee220abaf4fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string nbtview::tag_code_to_string</definition>
        <argsstring>(TypeCode type)</argsstring>
        <name>tag_code_to_string</name>
        <param>
          <type><ref refid="namespacenbtview_1afc3b190dfb9b456a2b36e19029d229b1" kindref="member">TypeCode</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/Stringifier.cpp" line="115" column="13" bodyfile="nbtview/Stringifier.cpp" bodystart="115" bodyend="146" declfile="nbtview/Stringifier.hpp" declline="32" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacenbtview_1a2e368e409169b9c433f16763be3f0b37" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nbtview::snbt_requires_quoting</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>snbt_requires_quoting</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/utils.hpp" line="19" column="13" bodyfile="nbtview/utils.hpp" bodystart="19" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacenbtview_1a99f417945a3700f4c8a19d670f19c3a7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string nbtview::quoted_string</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>quoted_string</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/utils.hpp" line="24" column="20" bodyfile="nbtview/utils.hpp" bodystart="24" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="namespacenbtview_1a0ee9f2ba9bf67f7636003442cfd4d967" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string nbtview::comma_delimited_array</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;vec, const array_format &amp;fmt)</argsstring>
        <name>comma_delimited_array</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>const <ref refid="structnbtview_1_1array__format" kindref="compound">array_format</ref> &amp;</type>
          <declname>fmt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/utils.hpp" line="37" column="13" bodyfile="nbtview/utils.hpp" bodystart="37" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="namespacenbtview_1a11276aad7ba3a66123c0e28acb20fc40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool nbtview::has_compression_header</definition>
        <argsstring>(const std::span&lt; unsigned char &gt; data)</argsstring>
        <name>has_compression_header</name>
        <param>
          <type>const std::span&lt; unsigned char &gt;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/zlib_utils.cpp" line="13" column="6" bodyfile="nbtview/zlib_utils.cpp" bodystart="13" bodyend="31" declfile="nbtview/zlib_utils.hpp" declline="19" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacenbtview_1a97dbd58ea309c68d49dbc0a80b7de5bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; unsigned char &gt;</type>
        <definition>std::vector&lt; unsigned char &gt; nbtview::decompress_data</definition>
        <argsstring>(std::vector&lt; unsigned char &gt; &amp;compressed_data)</argsstring>
        <name>decompress_data</name>
        <param>
          <type>std::vector&lt; unsigned char &gt; &amp;</type>
          <declname>compressed_data</declname>
        </param>
        <briefdescription>
<para>Decompress data into a vector of bytes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/zlib_utils.cpp" line="108" column="1" bodyfile="nbtview/zlib_utils.cpp" bodystart="108" bodyend="120" declfile="nbtview/zlib_utils.hpp" declline="23" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacenbtview_1a5f590b4b0e4a446f4604ad46e147a2cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nbtview::inflate_sectors</definition>
        <argsstring>(const std::vector&lt; std::span&lt; unsigned char &gt;&gt; &amp;compressed_sectors, std::vector&lt; unsigned char &gt; &amp;decompressed_data)</argsstring>
        <name>inflate_sectors</name>
        <param>
          <type>const std::vector&lt; std::span&lt; unsigned char &gt;&gt; &amp;</type>
          <declname>compressed_sectors</declname>
        </param>
        <param>
          <type>std::vector&lt; unsigned char &gt; &amp;</type>
          <declname>decompressed_data</declname>
        </param>
        <briefdescription>
<para>A return value less than zero indicates an error. </para>
        </briefdescription>
        <detaileddescription>
<para>Decompress a vector of sectors into a vector of bytes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nbtview/zlib_utils.cpp" line="123" column="5" bodyfile="nbtview/zlib_utils.cpp" bodystart="123" bodyend="151" declfile="nbtview/zlib_utils.hpp" declline="26" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Utilities to read, write, and manipulate NBT data. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="nbtview/BinaryDeserializer.cpp" line="13" column="1"/>
  </compounddef>
</doxygen>
